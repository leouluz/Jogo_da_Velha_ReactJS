{"version":3,"sources":["JogoDaVelha.js","reportWebVitals.js","index.js"],"names":["JogoDaVelha","emptyBoard","Array","fill","useState","board","setBoard","currentPlayer","setCurrentPlayer","winner","setWinner","checkDraw","every","item","useEffect","possibleWaysToWin","forEach","cells","cell","className","map","index","onClick","itemIndex","handleCellClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNA0FeA,MAvFf,WAEE,IAAMC,EAAaC,MAAM,GAAGC,KAAK,IAFZ,EAIKC,mBAASH,GAJd,mBAIdI,EAJc,KAIPC,EAJO,OAKqBF,mBAAS,KAL9B,mBAKdG,EALc,KAKCC,EALD,OAMOJ,mBAAS,MANhB,mBAMdK,EANc,KAMNC,EANM,KA8CfC,EAAY,WACF,MAAVF,GACEJ,EAAMO,OAAM,SAAAC,GAAI,MAAa,KAATA,MAAcH,EAAU,YAYpD,OADAI,qBApCqB,WACnB,IAAMC,EAAoB,CACxB,CAACV,EAAM,GAAGA,EAAM,GAAGA,EAAM,IACzB,CAACA,EAAM,GAAGA,EAAM,GAAGA,EAAM,IACzB,CAACA,EAAM,GAAGA,EAAM,GAAGA,EAAM,IAEzB,CAACA,EAAM,GAAGA,EAAM,GAAGA,EAAM,IACzB,CAACA,EAAM,GAAGA,EAAM,GAAGA,EAAM,IACzB,CAACA,EAAM,GAAGA,EAAM,GAAGA,EAAM,IAEzB,CAACA,EAAM,GAAGA,EAAM,GAAGA,EAAM,IACzB,CAACA,EAAM,GAAGA,EAAM,GAAGA,EAAM,KAG3BM,IAEAI,EAAkBC,SAAQ,SAAAC,GACpBA,EAAML,OAAM,SAAAM,GAAI,MAAa,MAATA,MAAeR,EAAU,aAC7CO,EAAML,OAAM,SAAAM,GAAI,MAAa,MAATA,MAAeR,EAAU,kBAkB/B,CAACL,IAErB,iCACE,oBAAIc,UAAU,QAAd,2BACA,qBAAKA,UAAS,gBAAWV,EAAS,YAAc,IAAhD,SACGJ,EAAMe,KAAI,SAACP,EAAMQ,GAAP,OACT,qBAEAF,UAAS,eAAUN,GACnBS,QAAS,kBA3DO,SAACD,GACvB,OAAIZ,GAGiB,KAAjBJ,EAAMgB,GAFD,MAMTf,EAASD,EAAMe,KACb,SAACP,EAAMU,GAAP,OAAqBA,IAAcF,EAAQd,EAAgBM,WAC3DL,EAAmC,MAAlBD,EAAwB,IAAM,MAiD5BiB,CAAgBH,IAH/B,SAIER,GAHGQ,QAQLZ,GACA,iCACE,sBAAKU,UAAU,qBAAf,UACE,mCAAMV,KACN,wBACAa,QA1BQ,WAClBd,EAAiB,KACjBF,EAASL,GACTS,EAAU,OAsBA,mCCrECe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.84c6b74f.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './JogoDaVelha.css'\n\nfunction JogoDaVelha() {\n  //Criação do array com 9 espaços\n  const emptyBoard = Array(9).fill(\"\") \n\n  const [board, setBoard] = useState(emptyBoard);  \n  const [currentPlayer, setCurrentPlayer] = useState(\"O\"); //Seta o jogador inicial\n  const [winner, setWinner] = useState(null); // Seta vencedor como null\n\n  //Verifica se existe um vencedor e define o proximo jogador caso não exista vencedor\n  const handleCellClick = (index) =>{\n    if (winner){\n      return null;\n    }\n    if (board[index] !== \"\" ){\n      return null;\n    }\n\n    setBoard(board.map(\n      (item, itemIndex) => itemIndex === index ? currentPlayer : item));\n      setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\"); \n  } \n\n  //Checa as possibilidades de vitoria/empate\n  const  checkWinner = () => {\n    const possibleWaysToWin = [\n      [board[0],board[1],board[2]],\n      [board[3],board[4],board[5]],\n      [board[6],board[7],board[8]],\n\n      [board[0],board[3],board[6]],\n      [board[1],board[4],board[7]],\n      [board[2],board[5],board[8]],\n      \n      [board[0],board[4],board[8]],\n      [board[2],board[4],board[6]],\n    ];\n    \n    checkDraw();\n\n    possibleWaysToWin.forEach(cells =>{\n      if (cells.every(cell => cell === \"O\")) setWinner(\"O Venceu!\");\n      if (cells.every(cell => cell === \"X\")) setWinner(\"X Venceu!\");\n    })\n  }\n\n  //Verifica se todos já foram selecionados e se existe um vencedor, caso não tenha empata\n  const checkDraw = () =>{\n    if (winner == null){\n      if (board.every(item => item !== \"\")) setWinner(\"Empatou\")\n    }\n  }\n  \n  //Seta todos os valores com os valores iniciais\n  const handleReset = () =>{\n    setCurrentPlayer(\"O\")\n    setBoard(emptyBoard);\n    setWinner(null);\n  }\n\n  useEffect(checkWinner,[board]);\n  return (\n    <main>\n      <h1 className=\"title\">Jogo da Velha</h1>\n      <div className={`board ${winner ? 'game-over' : ''}`}>\n        {board.map((item, index) =>(\n          <div \n          key={index}\n          className={`cell ${item}`}\n          onClick={() => handleCellClick(index)}\n          >{item}\n            </div>\n        ))}\n      </div>\n        {\n          winner &&\n          <footer>\n            <div className=\"winnerNotification\">\n              <h2> {winner}</h2>\n              <button\n              onClick={handleReset}>Recomeçar</button>\n            </div>\n        </footer>\n        }\n    </main>\n  );\n}\n\nexport default JogoDaVelha;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './JogoDaVelha';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}